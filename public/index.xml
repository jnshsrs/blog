<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Science, Physiotherapy and Stats</title>
    <link>/</link>
    <description>Recent content on Science, Physiotherapy and Stats</description>
    <generator>Hugo - gohugo.io</generator>
    <language>en</language>
    <contact>jenshuesers@gmail.com</contact>
    <copyright>&copy; <a href="https://github.com/jnshsrs">Jens Hüsers</a> 2018</copyright>
    
        <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Exploring the Cost Function of Logistic Regression</title>
      <link>/post/exploring-the-cost-function-of-logistic-regression/</link>
      <pubDate>Sun, 14 Oct 2018 00:00:00 +0000</pubDate>
      <author>Jens Hüsers</author>
      <guid>/post/exploring-the-cost-function-of-logistic-regression/</guid>
      <description></description>
      
      <content>&lt;script src=&#34;//yihui.name/js/math-code.js&#34;&gt;&lt;/script&gt;
&lt;!-- Just one possible MathJax CDN below. You may use others. --&gt;
&lt;script async
  src=&#34;//mathjax.rstudio.com/latest/MathJax.js?config=TeX-MML-AM_CHTML&#34;&gt;
&lt;/script&gt;
&lt;p&gt;This post is about exploring the cost function and its connection to the logistic regression function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::opts_chunk$set(echo = TRUE, warning=F, message=FALSE, fig.align=&amp;#39;center&amp;#39;)
library(tidyverse)
library(plotly)
library(latex2exp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I want to get a deeper understanding of the connection between the logistic regresssion and its cost function. Therefore I created a function in R and conducted a grid approximation with this function. The results are presented below.&lt;/p&gt;
&lt;p&gt;The logistic regression can be applied to data where the dependent variable is coded binary where the referent class is coded as a 1 and as 0 otherwise. We can model the relationship of this binary outcome variable with metric and categorical predictor variables. As a result, we can then compute the predicted probability that a datapoint is a member of the referent class coded as 1.&lt;/p&gt;
&lt;p&gt;The logistic regression model with an intercept and one depentent variable is as follows:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\log(\frac{p(x)}{1 - p(x)}) = \beta_0 + \beta_1x_i\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This formula models the Logarithm of the Odds-Ratio. This is the logistic regression model with an intercept and one predictor variable. To find the &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;-Coefficients that fit the data best we optimize the following cost-function, the Log-Likelihood function.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[Cost(p(x), y) = \frac{1}{n}\sum{-y_i \log(p(x_i) - (1 - y_i)\log(p(x_i)))}\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Since the linear equation of logistic regression predicts the Logit, this equation can be rearranged to get a prediction of &lt;span class=&#34;math inline&#34;&gt;\(p(x)\)&lt;/span&gt; which is basically the probability that a observation belongs to the reference group:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[p(x) = \frac{1}{(1 + e^{-(\beta_0 + \beta_1x_i)})}\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Logistic function to predict p(x)
logistic_function &amp;lt;- function(D, b) {
  1 / (1 + (1 / exp(D %*% b)))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can then create the cost function and put the logistic-function in the cost-function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Cost function for logistic regression
logistic_cost &amp;lt;- function(y, D, b){
  y_hat &amp;lt;- logistic_function(D, b)
  1/length(y_hat) * sum(-y * -log(y_hat) - (1 - y) * -log((1 - y_hat)))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To conduct the grid approximation, I write another function that takes the grid containing parameters, the predictor matrix and the outcome variable y as arguments and them computes the cost for every parameter combination. The function returns a matrix containing the grid and the corresponding cost.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Compute the cost for different combinations of regression weights
# Returns the costs in a vector
grid_approx_logistic &amp;lt;- function(grid, data, outcome) {
  cost &amp;lt;- NULL
  for(i in seq(nrow(grid))) {
    betas &amp;lt;- as.numeric(grid[i, ])
    betas &amp;lt;- create_weight_matrix(betas)
    cost[i] &amp;lt;- logistic_cost(y = outcome, D = data, b = betas)    
  }
  cost_grid &amp;lt;- as.matrix(cbind(grid, cost))
  return(cost_grid)
}

# Create helper function to construct the weight matrix given a vector with proposed weights
# Used in the grid_approx_logistic function
create_weight_matrix &amp;lt;- function(weights) {
  betas &amp;lt;- matrix(weights, nrow = length(weights))
  return(betas)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I will use the &lt;code&gt;mtcars&lt;/code&gt; dataset and I choose to model the probability beeing an automatic car as a function of miles per hour. First I set the grid with plausible values (I got them from running the glm function in the first place).&lt;/p&gt;
&lt;p&gt;After that I create the predictor matrix, containing the intercept and the &lt;code&gt;mpg&lt;/code&gt; data, and subset the variable &lt;code&gt;am&lt;/code&gt; as outcome &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create grid
grid &amp;lt;- expand.grid(seq(-20, 0, length.out = 50), seq(0, 1, length.out = 50))

# set intercept
mtcars$intercept &amp;lt;- 1
# subset prediction matrix
data &amp;lt;- as.matrix(mtcars[, c(&amp;quot;intercept&amp;quot;, &amp;quot;mpg&amp;quot;)])
# subset dependent variable
y &amp;lt;- mtcars$am&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next I run the &lt;code&gt;grid_approx_logistic&lt;/code&gt; function which computes the cost for every combination.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# compute cost for each parameter combination
cost &amp;lt;- grid_approx_logistic(grid = grid, data = data, outcome = y)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I visulize the result with a combination of a raster and contour plot to visualize the parameter combination with the hightes likelihood.&lt;/p&gt;
&lt;p&gt;Furthermore I added the regression weights computed by the &lt;code&gt;glm&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# compute the logistic regression with base r function glm
model &amp;lt;- glm(am ~ mpg, family = &amp;quot;binomial&amp;quot;, data = mtcars)  
coefs &amp;lt;- as.data.frame(map(coef(model), list)) %&amp;gt;% set_names(c(&amp;quot;beta0&amp;quot;, &amp;quot;beta1&amp;quot;))

# visualize the regession combinations vs the computed cost
as.data.frame(cost) %&amp;gt;% 
  ggplot(aes(x = Var1, y = Var2, z = cost, color = cost, fill = cost)) +
  geom_raster(interpolate = FALSE) +
  geom_contour(bins = 30) + 
  geom_point(data = coefs, aes(x = beta0, y = beta1), size = 4, color = &amp;quot;white&amp;quot;, inherit.aes = F) +
  geom_label(data = coefs, aes(x = beta0, y = beta1), 
             label = TeX(&amp;quot;$\\beta_0, \\beta_1 = (-6.6, 0.3)$&amp;quot;),
             inherit.aes = F,
             nudge_x = 1, nudge_y = .05, size = 5) +
  theme_classic() +
  scale_fill_continuous(&amp;quot;Cost-Function&amp;quot;) +
  scale_color_continuous(&amp;quot;Cost-Function&amp;quot;) +
  xlab(TeX(&amp;quot;$\\beta_0$ (Intercept)&amp;quot;)) +
  ylab(TeX(&amp;quot;$\\beta_1$ (Regressionsgewicht für Miles per Hour)&amp;quot;)) +
  ggtitle(&amp;quot;Maximizing the negative Log-Likelihood Function&amp;quot;, sub = &amp;quot;Grid Approximation&amp;quot;) +
  theme(text = element_text(family = &amp;quot;Times&amp;quot;),
        title = element_text(size = 14), 
        axis.text = element_text(size = 12))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-10-14-exploring-the-cost-function-of-logistic-regression_files/figure-html/visualize-ml-1.png&#34; width=&#34;960&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can see that the area with the hightest density, resp highest likelihood, correspondes with the computed coefficents.&lt;/p&gt;
&lt;p&gt;However, we can also see, that there is a area corresponding to low values of the cost function which maybe leads to unstable estimates of the regression coeficients.&lt;/p&gt;
&lt;p&gt;Since I started with a grid that mirrors the result of the glm function, grid approximation is often a bad approach to find the best parameter combination of a logistic model.&lt;/p&gt;
&lt;p&gt;Other approaches use the gradient decent algorithm, which is computational much cheaper and therefore faster.&lt;/p&gt;
</content>
      
    </item>
    
    <item>
      <title>Der Einstieg in die Programmiersprache R</title>
      <link>/post/r-tutorium-gmds-2018/</link>
      <pubDate>Thu, 06 Sep 2018 00:00:00 +0000</pubDate>
      <author>Jens Hüsers</author>
      <guid>/post/r-tutorium-gmds-2018/</guid>
      <description>My tutorial on ‘Introduction in R’ at the 63rd Annual Conference of the GMDS e.V. on Sep. 6th 2018 in Osnabrück.</description>
      
      <content>&lt;script src=&#34;//yihui.name/js/math-code.js&#34;&gt;&lt;/script&gt;
&lt;!-- Just one possible MathJax CDN below. You may use others. --&gt;
&lt;script async src=&#34;//mathjax.rstudio.com/latest/MathJax.js?config=TeX-MML-AM_CHTML&#34;&gt;
&lt;/script&gt;
&lt;div id=&#34;preface&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Preface&lt;/h1&gt;
&lt;p&gt;Dieser Post enthält das Skript sowie die Aufgaben inklusive Lösungen meines Tutoriums “Einstieg in die Programmiersprache R” auf der 63. Jahrestagung der GMDS e.V. in Osnabrück am 6.9.2018. Das Skript mit den Aufgaben ohne Lösungen sind in der Datei &lt;code&gt;workbook-rstats-gmds18-aufgaben.Rmd&lt;/code&gt; auf &lt;a href=&#34;https://github.com/jnshsrs/gmds18-tutorium-rstats&#34; title=&#34;Github Repository&#34;&gt;Github&lt;/a&gt; verfügbar.&lt;/p&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;In diesem Kurs werden wir mit R und RStudio als Programmierumgebung (IDE) arbeiten. Beide Programme stehen kostenlos zur Verfügung.&lt;/p&gt;
&lt;p&gt;Zunächst muss die Programmiersprache R installiert werden. Die aktuelle Version kann auf der offiziellen R-Website heruntergeladen werden (&lt;a href=&#34;http://www.r-project.org&#34; class=&#34;uri&#34;&gt;http://www.r-project.org&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Danach kann RStudio installiert werden, welches unter der Open Source Lizenz kostenlos zur Verfügung steht (&lt;a href=&#34;https://www.rstudio.com/products/rstudio/download/&#34; class=&#34;uri&#34;&gt;https://www.rstudio.com/products/rstudio/download/&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;warum-r&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Warum R?&lt;/h2&gt;
&lt;p&gt;R hat eine steile Lernkurve und häufig fällt der Einstieg ohne Ausbildung zum Informatiker oder “Computer Scientist”. Jedoch zahlt sich das Lernen für Personen aus, die in der Wissenschaft arbeiten.&lt;/p&gt;
&lt;p&gt;Welche Vorteile bieten Programmiersprachen im Vergleich zu den Statistiksoftwaretools wie SPSS und SAS?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kostenlos mit vielen Erweiterungen und Unterstützung einer breiten R-Nutzergruppe (z.B. auf Stackoverflow)&lt;/li&gt;
&lt;li&gt;Dokumentation durch Computer Code&lt;/li&gt;
&lt;li&gt;Reproduzierbarkeit der Analysen&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Möglichkeit fremde Pakete zu nutzten oder eigene Pakete zu schreiben um eigenen Arbeits- und Analyseprozesse zu standardisieren.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;R ist auch ein Werkzeug bzw. ein Werkzeugkoffer, um “Statistik” zu verstehen und neue statistische Konzepte zu lernen.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;r-studio&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R Studio&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Programmeinführung R-Studio&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Dokumentation&lt;/li&gt;
&lt;li&gt;Umgebung (Enironment)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Konsole&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;lern-ressourcen-und-materialien&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Lern-Ressourcen und Materialien&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;www.stackoverflow.com&#34;&gt;stackoverflow.com&lt;/a&gt; Online Forum, ein Fragesteller stellt eine Frage und jemand antwortet. Antworten können von anderen Nutzern bewertet werden&lt;/li&gt;
&lt;li&gt;R for Data Science (im Internet frei verfügbar)&lt;/li&gt;
&lt;li&gt;Twitter (z.B. &lt;span class=&#34;citation&#34;&gt;[@hadlywickham]&lt;/span&gt;(www.twitter.com(hadlywickham), &lt;span class=&#34;citation&#34;&gt;[@rdpeng]&lt;/span&gt;(&lt;a href=&#34;https://twitter.com/rdpeng&#34; class=&#34;uri&#34;&gt;https://twitter.com/rdpeng&lt;/a&gt;)))&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;www.datacamp.com&#34;&gt;DataCamp&lt;/a&gt;, &lt;a href=&#34;www.udemy.com&#34;&gt;Udemy&lt;/a&gt; (Kostenpflichtige eLearning Platformen im Bereich statistisches Programmieren und Data Science)&lt;/li&gt;
&lt;li&gt;kostenfreie Online-Lern Angebote auf Youtube z.B. &lt;a href=&#34;https://www.youtube.com/playlist?list=PLqzoL9-eJTNBDdKgJgJzaQcY6OXmsXAHU&#34;&gt;MarinStatsLectures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rstudio.com/resources/cheatsheets/&#34;&gt;Oft existieren für bestimmte Probleme sogenannte CheatSheets bzw. Spickzettel, welche die wichtigsten Kommandos zusammenfassen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;kapitel-1---datenstrukturen&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Kapitel 1 - Datenstrukturen&lt;/h1&gt;
&lt;div id=&#34;einstieg-in-die-konsole-und-datentypen&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Einstieg in die Konsole und Datentypen&lt;/h2&gt;
&lt;p&gt;Vorab wichtig: R ist CaseSensitive, dass heißt, Groß- und Kleinbuchstaben sind unterschiedliche Zeichen. Der Großbuchstabe &lt;code&gt;X&lt;/code&gt; ist demnach nicht das selbe wie der Kleinbuchstabe x. Im R-Code werden daher zum Beispiel Variablennamen &lt;code&gt;x_mean&lt;/code&gt; und &lt;code&gt;X_mean&lt;/code&gt; unterschiedlich interpretiert.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Datentypen (Numerisch, Integer, String, Faktoren, Boolean)&lt;/li&gt;
&lt;li&gt;Integer (Ganzzahl) z.B. &lt;code&gt;100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Numerisch (Float, Kommazahl) &lt;code&gt;0.12&lt;/code&gt; oder Ratio zweier Integer &lt;code&gt;1/10&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Boolean &lt;code&gt;TRUE&lt;/code&gt; or &lt;code&gt;FALSE&lt;/code&gt; (oder entprechend 1 und 0), werden in R als Datentyp &lt;code&gt;logical&lt;/code&gt; bezeichnet&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Zeichenkette, String &lt;code&gt;&amp;quot;Dies ist eine Zeichenkette&amp;quot;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Datetime Datentyp (z.B. &lt;code&gt;as.Date(&amp;quot;2017-05-05&amp;quot;)&lt;/code&gt;, hier ist die Funktionseingabe eine Zeichenkette in einer bestimmten Reihenfolge Jahr-Monat-Tag)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Besondere Datenwerte sind fehlende Werte z.B. &lt;code&gt;NA&lt;/code&gt; (Not available) oder &lt;code&gt;NaN&lt;/code&gt; (Not a Number z.B. &lt;code&gt;log(-10)&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;NULL&lt;/code&gt; Wert&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Zum Überprüfen des Datentyps gibt es verschiedene Funktionen z.B. &lt;code&gt;is.character()&lt;/code&gt;, &lt;code&gt;is.numeric()&lt;/code&gt; oder &lt;code&gt;is.logical()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(Build-In) Funktionen&lt;/li&gt;
&lt;li&gt;z.B. &lt;code&gt;abs()&lt;/code&gt;, &lt;code&gt;sqrt()&lt;/code&gt;, &lt;code&gt;nchar()&lt;/code&gt;, &lt;code&gt;mean()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Dokumentation &lt;code&gt;?abs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Funktions-Parameter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Erstellen und Nutzten von Datenstrukturen (“Objekte” und “Klassen”)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Vektoren &lt;code&gt;c()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Liste: &lt;code&gt;list()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;data.frame &lt;code&gt;data.frame()&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Es gibt noch weitere Datentypen, wie z.B. Matrix oder umfangreichere Strukturen wie z.B. Lineare Regressionsmodelle Da R Methoden für das objekt-orientierte Programmieren anbietet, können auch eigene Datenstrukturen entwickelt und genutzt werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;r-als-taschenrechner-kennenlernen-der-konsole&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;R als Taschenrechner (Kennenlernen der Konsole)&lt;/h2&gt;
&lt;p&gt;Wir können mathematische Operationen mit der R-Konsole berechen.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;1 + 1 # 2
1 - 1 # 0
2 * 4 # 8
2 / 4 # 1/2 oder .5

1 + 1/2
1 / 1  + 2
sqrt(9) + 3
sqrt(2)^2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In R ist es üblich Ergebnisse in einer Variable zu speichern. Das ist mit einem “Pfeil”&amp;quot; als Zuweisungsoperator &lt;code&gt;&amp;lt;-&lt;/code&gt; (ein kleiner als Zeichen gefolgt von einem Minuszeichen) möglich. Auch &lt;code&gt;=&lt;/code&gt; ist möglich, in R aber unüblich.&lt;/p&gt;
&lt;p&gt;Zum Beispiel kann die Summe aus der ersten Berechnung in einer Variablen &lt;code&gt;x&lt;/code&gt; und die Summe aus Berechnung zwei in &lt;code&gt;y&lt;/code&gt; gespeichert werden.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x &amp;lt;- 1 + 1&lt;/code&gt; und &lt;code&gt;y &amp;lt;- 2 * 4&lt;/code&gt;, wobei x und y die Ergebnisse der Berechnung in Form eines numerischen Datentyps (s.u) speichern.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x + y&lt;/code&gt; repräsentiert somit &lt;code&gt;(1 + 1) + (2 * 4)&lt;/code&gt; bzw. &lt;code&gt;2 + 8&lt;/code&gt;. R beachtet dabei Rechenregeln wie beispielsweise das Kommutativgesetzt oder das Assoziativgesetz.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;arbeiten-mit-vektoren&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Arbeiten mit Vektoren&lt;/h2&gt;
&lt;p&gt;Durchschnittlich Temperaturen in den kommenden sieben Tagen.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Erstellen eines Vektors
# Temperatur
# Daten aus Goolge https://www.google.com/search?q=google+wetter&amp;amp;ie=utf-8&amp;amp;oe=utf-8&amp;amp;client=firefox-b-ab 
# Suche am 19.4.2017
temperaturen &amp;lt;- c(27, 27, 22, 24, 13, 13, 13, 12)

# Was ist die höchste bzw. die kleinste Temperatur?
max_temp &amp;lt;- max(temperaturen)
min_temp &amp;lt;- min(temperaturen)
paste(&amp;quot;Der wärmste Tag wird&amp;quot;, max_temp, &amp;quot;Grad Celsius warm. Die kälteste&amp;quot;, min_temp, &amp;quot;Grad Celsius.&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Der wärmste Tag wird 27 Grad Celsius warm. Die kälteste 12 Grad Celsius.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;median(temperaturen) # Berechnen des Medians&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 17.5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Extra Informationen: 
# Da der Median das 50% Quantil ist, kann dieser auch durch die Funktion `quantile` berechnet werden
# Diese Funktion erwartet zwei Argumente:
# Einen Vektor, der die Daten bzw. die Variable beinhaltet
# Zudem einen Vektor der die zu berechnenden Quantile beinhaltet
# Nähere Informationen durch `?quantile`
quantile(x = temperaturen, probs = c(.5)) # Das zweite Argument enthalt nur einen Wert (.5), da wir ausschließlich den Median errechnen möchten&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  50% 
## 17.5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;eigenschaften-von-vektoren&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Eigenschaften von Vektoren&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Vektoren Recycling&lt;/li&gt;
&lt;li&gt;Vektorisierte Operationen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Beispiele für vektorisierte Operationen&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Messgerät unterschätzt jede Messung um einen Grad
temperaturen_unbiased &amp;lt;- temperaturen + 1

# Messgerät ist falsch kalibriert und überschätzt mit steigender Temperatur 
# die tatsächliche Temperatur (um 10%)
temperaturen * .9&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 24.3 24.3 19.8 21.6 11.7 11.7 11.7 10.8&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;task&#34;&gt;
&lt;p class=&#34;task&#34;&gt;
&lt;p&gt;&lt;strong&gt;Aufgabe:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Rechne die Temperaturen die im Vektor &lt;em&gt;temperaturen&lt;/em&gt; gespeichert sind in die Einheit Fahrenheit um.&lt;/p&gt;
&lt;p&gt;Dazu muss die Temperatur in Celsius mit 5/9 multipliziert und zu dieser Größe 32 addiert werden.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temperaturen_fahrenheit &amp;lt;- temperaturen * 5/9 + 32
print(temperaturen_fahrenheit)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 47.00000 47.00000 44.22222 45.33333 39.22222 39.22222 39.22222 38.66667&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;kapitel-2---funktionen&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Kapitel 2 - Funktionen&lt;/h1&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/tut1-r-function.png&#34; alt=&#34;Syntaktische Aufbau einer Funktion in R&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Syntaktische Aufbau einer Funktion in R&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;anwendungsbeispiel-mittelwert&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Anwendungsbeispiel Mittelwert&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Mittelwert
mittelwert &amp;lt;- function(x) {
  n &amp;lt;- length(x) 
  sum_x &amp;lt;- sum(x)
  sum_x / n
}&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;task&#34;&gt;
&lt;p&gt;&lt;strong&gt;Aufgabe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Erstellen Sie eine Funktion um die (empirische) Standardabweichung zu berechnen die wie in der folgenden Funktion definiert ist.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\sigma =\sqrt{\frac{1}{n-1}\cdot {\sum\limits_{i=1}^n} (x_i-\bar{x})^2}\)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Die Standardabweichung ist definiert als Wurzel des Mittelwerts folgender Größe: Der Summe der quadrierten Abweichung jedes Datenpunktes vom Mittelwert (SAQ).*&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Folgende Funktionen sind nützlich für die Erstellung dieser Funktion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;length&lt;/code&gt; die Länge des Vektors&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum&lt;/code&gt; Summe eines Vektors&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x^2&lt;/code&gt; Quadiert die Inhalte des Vektors &lt;code&gt;x&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Die (empirische) Standardabweichung beschreibt die Streuung einer Zufallsvariable. Je größer die Standardabweichung desto wahrscheinlich sind Datenpunkte, die eine höhere Distanz zum Mittelwert haben.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;source(&amp;quot;code/temperaturen.R&amp;quot;)
# Standardabweichung
standardabweichung &amp;lt;- function(x) {
  # Anzahl der Beobachtungen der Variablen
  n &amp;lt;- length(x)
  # Berechnung des Mittelwerts (die vorher definierte Funktion)
  mw &amp;lt;- mittelwert(x)
  # Berechnen der Summe der Abweichungsquadrate (saq)
  saq &amp;lt;- sum((x - mw)^2)
  # Berechnung der Standardabweichung
  stabw &amp;lt;- sqrt((1 / (n - 1)) * saq)
  return(stabw)
}

standardabweichung(temperaturen) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6.749339&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Je kleiner die Standardabweichung, desto konstanter ist das Wetter in diesen Acht Tagen&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;task&#34;&gt;
&lt;p&gt;&lt;strong&gt;Aufgabe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recherchiere bei Google die Temperaturen der kommenden Tage für Moskau und Los Angeles. Es werden bei Google das Wetter für den aktuellen Tag und der folgenden Woche angegeben.&lt;/p&gt;
&lt;p&gt;Schreib eine Funktion mit dem Namen &lt;code&gt;wettervorhersage&lt;/code&gt;. Diese Funktion hat einen Parameter (oder auch Funktionsargument genannt). Dieser Parameter ist ein numerischer Vektor (mit der Temperatur der kommenden Tage).&lt;/p&gt;
&lt;p&gt;Die Funktion soll die kleinste und die höchste Temperatur berechnen sowie die Standardabweichung und die Informationen als String zurück geben.&lt;/p&gt;
&lt;p&gt;In welcher Stadt ist besseres Wetter, wo ist das Wetter konstanter?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wettervorhersage &amp;lt;- function(x) {
  min_temp &amp;lt;- min(x)
  max_temp &amp;lt;- max(x)
  stabw &amp;lt;- standardabweichung(x)
  vorhersage &amp;lt;- paste0(&amp;quot;Die geringste Temperatur ist: &amp;quot;, min_temp, &amp;quot; und die höchste Temperatur &amp;quot;, max_temp, &amp;quot; Grad Celsius.&amp;quot;)
  konstant &amp;lt;- paste0(&amp;quot;Die Temperaturschwankung (gemessen durch die Standardabweichung) beträgt &amp;quot;, round(stabw, 2), &amp;quot; Grad Celsius.&amp;quot;)
  print(vorhersage)
  print(konstant)
}

los_angeles &amp;lt;- c(29, 31, 31, 28, 26, 26, 26, 26)
moskau &amp;lt;- c(19, 18, 10, 9, 9, 9, 8, 8)
  
wettervorhersage(los_angeles)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Die geringste Temperatur ist: 26 und die höchste Temperatur 31 Grad Celsius.&amp;quot;
## [1] &amp;quot;Die Temperaturschwankung (gemessen durch die Standardabweichung) beträgt 2.23 Grad Celsius.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wettervorhersage(moskau)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Die geringste Temperatur ist: 8 und die höchste Temperatur 19 Grad Celsius.&amp;quot;
## [1] &amp;quot;Die Temperaturschwankung (gemessen durch die Standardabweichung) beträgt 4.53 Grad Celsius.&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;kapitel-3---datensatz&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Kapitel 3 - Datensatz&lt;/h1&gt;
&lt;div id=&#34;arbeiten-mit-listen-und-data.frames&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Arbeiten mit Listen und data.frames&lt;/h2&gt;
&lt;p&gt;Ist eine Sammlung verschiedener Datentypen.&lt;/p&gt;
&lt;p&gt;Erstellen von Listen durch die Funktion &lt;code&gt;list()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# In einem Vektor müssen die Elemente den gleichen Datentyp haben
# Welcher Datentyp besitzt der folgende Vektor?
c(&amp;quot;A&amp;quot;, 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;A&amp;quot; &amp;quot;2&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Die Liste muss nicht die selben Datentypen beinhalten (in Gegensatz zu einem Vektor)
# Beispielliste mit zwei Einträgen
beispielliste &amp;lt;- list(1, &amp;quot;B&amp;quot;)

# Wir können auch Vektoren als Listenelemente speichern 
temperaturen_liste &amp;lt;- list(temperaturen_la, temperaturen_moskau)

# Wir können sogar Funktionen in Listen speichern 
# Und wem das nicht genug ist, der speichert einfach eine Liste in einer Liste ;)
sinnlosse_beispielliste &amp;lt;- list(beispielliste, standardabweichung)
str(sinnlosse_beispielliste)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## List of 2
##  $ :List of 2
##   ..$ : num 1
##   ..$ : chr &amp;quot;B&amp;quot;
##  $ :function (x)  
##   ..- attr(*, &amp;quot;srcref&amp;quot;)= &amp;#39;srcref&amp;#39; int [1:8] 4 23 14 1 23 1 4 14
##   .. ..- attr(*, &amp;quot;srcfile&amp;quot;)=Classes &amp;#39;srcfilecopy&amp;#39;, &amp;#39;srcfile&amp;#39; &amp;lt;environment: 0x7fcf02dc7f58&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;datensatz-aka-data.frame&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Datensatz aka data.frame&lt;/h2&gt;
&lt;p&gt;Der &lt;code&gt;data.frame&lt;/code&gt;ist eine besondere Form der Liste. Er enthält &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt; Vektoren der selben Länge &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;temperaturen &amp;lt;- data.frame(temperaturen_la, temperaturen_moskau)

# Mit verschiedenen Funktionen können wir den Datensatz darstellen
nrow(temperaturen) # Anzahl der Zeilen des Datensatzes&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 8&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ncol(temperaturen) # Anzahl der Spalten des Datensatzes&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dim(temperaturen) # Anzahl der Zeilen und Spalten &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 8 2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;str(temperaturen) # Struktur des Datensates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;#39;data.frame&amp;#39;:    8 obs. of  2 variables:
##  $ temperaturen_la    : num  18 22 26 26 25 24 23 22
##  $ temperaturen_moskau: num  16 14 18 8 8 12 12 13&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(temperaturen, n = 2) # Zwei Funktionsargumente, n ist die Anzahl der Zeilen, welche angezeigt werden sollen&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   temperaturen_la temperaturen_moskau
## 1              18                  16
## 2              22                  14&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tail(temperaturen, n = 2) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   temperaturen_la temperaturen_moskau
## 7              23                  12
## 8              22                  13&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;colnames(temperaturen) # Spaltennamen&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;temperaturen_la&amp;quot;     &amp;quot;temperaturen_moskau&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(temperaturen) # Klasse des Objekts (in diesem Fall `data.frame`)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;operationen-mit-datensatzen-data.frames&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Operationen mit Datensätzen (data.frames)&lt;/h2&gt;
&lt;p&gt;Oft möchte man nur mit Ausschnitten des Datensatzes arbeiten. R bietet die Möglichkeit einzelne Spalten (Variablen) des Datensatzes auszuwählen sowie einzelne Zeilen auszuwählen. Für unseren Datensatz mit den Temperaturen könnten wir z.B. ausschließlich die Temperaturen für das Wochenende und nur für Los Angeles auswählen.&lt;/p&gt;
&lt;p&gt;Es gibt mehrere Möglichkeiten, eine Auswahl eines Datensatzes zu erzeugen. Wenn wir einzelne Spalten eines Datensatzes auswählen möchten, eignet sich die &lt;code&gt;$&lt;/code&gt;(Dollar)-Notation. Dabei wird über den Datensatznamen und den Spaltennamen, die durch ein &lt;code&gt;$&lt;/code&gt; verknüft werden auf die spezielle Spalte zugegriffen: &lt;code&gt;datensatz_name$spaltenname&lt;/code&gt; Wenn wir auf die Spalte &lt;code&gt;temperaturen_la&lt;/code&gt; unseres Datensatzes &lt;code&gt;temperaturen&lt;/code&gt; zugreifen wolle, könnten wir dieses durch den Befehl &lt;code&gt;temperaturen$temperaturen_la&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In diesem Fall ist das Ergebnis ein Vektor mit den Daten aus der abgefragten Spalte &lt;code&gt;temperaturen_la&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Die &lt;code&gt;$&lt;/code&gt;-Notation ermöglicht es uns nicht nur, auf einzelne Spalten zurückzugreifen, sondern auch neue Spalten zu erstellen.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data.frame$neue_spalte &amp;lt;- x 
# wobei x ein Vektor mit neuen Daten ist, z.B. das Datum der entsprechenden Tage 

temperaturen$temperaturen_kairo &amp;lt;- c(36, 35, 37, 37, 36, 35, 34, 34)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;importieren-eines-datensatzes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Importieren eines Datensatzes&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/img/tut1-r-csv-rows.png&#34; style=&#34;width:45.0%&#34; /&gt; &lt;img src=&#34;/img/tut1-r-csv-columns.png&#34; style=&#34;width:45.0%&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Der Datensatz, in R als &lt;code&gt;data.frame&lt;/code&gt; bezeichnet, ist eine zentrale Datenstruktur, die bei Datenanalysen zum Einsatz kommt. Viele Datensätze sind so formatiert, dass sie direkt in R importiert werden können. So können zum Beispiel &lt;code&gt;data.frames&lt;/code&gt; aus Excel, SPSS oder SAS direkt importiert werden.&lt;/p&gt;
&lt;p&gt;Häufig liegen diese Daten jedoch in Textdateien im CSV-Format vor. CSV steht für Komma-separierte-Werte (engl. comma-separated-values). Mit Hilfe der Funktion &lt;code&gt;read.csv&lt;/code&gt; können Dateien im CSV-Format in R eingelesen werden.&lt;/p&gt;
&lt;p&gt;Wir verwenden in diesem Tutorial den &lt;a href=&#34;https://www.kaggle.com/c/titanic&#34;&gt;Titanic Datensatz&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/titanic-new-york-herald.jpeg&#34; alt=&#34;Headline of THE NEW YORK HERALD 15th of April 1912&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Headline of THE NEW YORK HERALD 15th of April 1912&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;titanic &amp;lt;- read.csv(&amp;quot;data/titanic.csv&amp;quot;)

library(tidyverse)
head(titanic)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   pclass survived                                            name    sex
## 1      1        1                   Allen, Miss. Elisabeth Walton female
## 2      1        1                  Allison, Master. Hudson Trevor   male
## 3      1        0                    Allison, Miss. Helen Loraine female
## 4      1        0            Allison, Mr. Hudson Joshua Creighton   male
## 5      1        0 Allison, Mrs. Hudson J C (Bessie Waldo Daniels) female
## 6      1        1                             Anderson, Mr. Harry   male
##     age sibsp parch ticket     fare   cabin embarked boat body
## 1 29.00     0     0  24160 211.3375      B5        S    2   NA
## 2  0.92     1     2 113781 151.5500 C22 C26        S   11   NA
## 3  2.00     1     2 113781 151.5500 C22 C26        S   NA   NA
## 4 30.00     1     2 113781 151.5500 C22 C26        S   NA  135
## 5 25.00     1     2 113781 151.5500 C22 C26        S   NA   NA
## 6 48.00     0     0  19952  26.5500     E12        S    3   NA
##                         home.dest
## 1                    St Louis, MO
## 2 Montreal, PQ / Chesterville, ON
## 3 Montreal, PQ / Chesterville, ON
## 4 Montreal, PQ / Chesterville, ON
## 5 Montreal, PQ / Chesterville, ON
## 6                    New York, NY&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Diese spezielle R-Syntax erlaubt es, auf einzelne Spalten eines Datensatzes zuzugreifen.&lt;/p&gt;
&lt;p&gt;Eine weitere Möglichkeit auf eine Auswahl des Datensatzes zist die sogenannten &lt;code&gt;[&lt;/code&gt;-Notation, wobei &lt;code&gt;[&lt;/code&gt; als “bracket” oder “Eckige Klammer” bezeichnet wird. Diese hat folgende Syntax: &lt;code&gt;datensatz[zeilenfilter, vektor mit den spaltennamen]&lt;/code&gt;. &lt;code&gt;datensatz&lt;/code&gt; bezeichnet den Namen des spezifischen Datensatzes, unser erstellter Datensatz hat den Namen. In die folgenden eckigen Klammern wird die Auswahl des Datensatzes spezifiziert. Vor dem Komma wird der Zeilenfilter gesetzt, nach der Klammer ein &lt;code&gt;character&lt;/code&gt; Vektor, der die Namen der ausgewählten Spalten enthält. Das Resultat ist ein neuer Datensatz, ausschließlich mit den Zeilen und Spalten, die ausgewählt wurden.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;auswahlen-von-zeilen-und-spalten&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Auswählen von Zeilen und Spalten&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;titanic[, &amp;quot;age&amp;quot;] # Nur Spalte Age
titanic[1, ] # Nur erste Zeile
titanic[c(1, 2), c(&amp;quot;age&amp;quot;, &amp;quot;sex&amp;quot;)] # gibt die ersten beiden Zeilen und die Spalten Alter und Geschlecht wieder
titanic[titanic$age &amp;lt;= 18, ] # gibt die ersten beiden Zeilen und die Spalten Alter und Geschlecht wieder
titanic[titanic$sex == &amp;quot;male&amp;quot;, ] # gibt die ersten beiden Zeilen und die Spalten Alter und Geschlecht wieder&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Cave: Oben habe ich geschrieben, das Ergebnis sei eine neuer Datensatz, also ein R-Objekt des Typs `data.frame´. Wenn nur eine Spalte ausgewählt wird, ist das Ergebnis ein Vektor&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;task&#34;&gt;
&lt;p&gt;&lt;strong&gt;Aufgabe&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Wie viele Passagiere waren auf der Reise unter 18 Jahre alt?&lt;/li&gt;
&lt;li&gt;Was ist das durchschnittliche Alter der Männer und der Frauen?&lt;/li&gt;
&lt;li&gt;Wie hoch ist der durchschnittliche Ticktpreis (&lt;code&gt;fare&lt;/code&gt;-Spalte)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Anzahl unter 18-jähriger Passagiere
nrow(titanic[titanic$age &amp;lt; 18, ])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 417&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Durchschnittlicher Alter Herren
mean(titanic$age[titanic$sex == &amp;quot;male&amp;quot;], na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 30.58523&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Durchschnittliches Alter Damen
mean(titanic$age[titanic$sex == &amp;quot;female&amp;quot;], na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 28.68709&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Durchschnittliche Ticketpreis
mean(titanic$fare, na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 33.29548&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;kapitel-4---tidyverse&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Kapitel 4 - Tidyverse&lt;/h1&gt;
&lt;div id=&#34;nutzen-von-paketen&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Nutzen von Paketen&lt;/h2&gt;
&lt;p&gt;Bisher haben wir uns mit den Standardfunktionen von R befasst. Zudem haben wir eine Funktions selber geschrieben.&lt;/p&gt;
&lt;p&gt;Häufig entwickeln Statistiker und Programmierer Erweiterungen, die auch Pakete genannt werden, die wir als sogenannte &lt;code&gt;library&lt;/code&gt; nutzten können.&lt;/p&gt;
&lt;p&gt;Eine der zentralen Erweiterungen in R momentan ist das Paket &lt;code&gt;tidyverse&lt;/code&gt;. Es erweitert den Funktionsumfang von data.frames. Diese weiterentwickelte data.frame wir auch als &lt;code&gt;tibble&lt;/code&gt; bezeichnet.&lt;/p&gt;
&lt;p&gt;Pakete wie &lt;code&gt;tidyverse&lt;/code&gt; müssen zusätzlich installiert werden. Dies gelingt durch die Funktion &lt;code&gt;install.packages&lt;/code&gt; z.B. &lt;code&gt;install.package(tidyverse)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Um das Paket zu nutzten müssen wir es zunächst laden. Dies gelingt durch den Funktionsaufruf &lt;code&gt;library(tidyverse)&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;importieren-von-daten&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Importieren von Daten&lt;/h2&gt;
&lt;p&gt;Auch Tidyverse-Paket hat eine Funktion, um Daten im CSV-Formtat zu importieren (und auch zu exportieren). Diese Funktion hat den Vorteil, dass sie die Daten schneller liest und den Datentyp einzelner Spalten zuverlässiger erkennt.&lt;/p&gt;
&lt;p&gt;Die Funktion heißt &lt;code&gt;read_csv&lt;/code&gt; (nicht verwechseln mit der Funktion &lt;code&gt;read.csv&lt;/code&gt; die mit einem Punkt geschrieben wird). Die Dokumentation erhalten wir durch &lt;code&gt;?read_csv&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
titanic &amp;lt;- read_csv(&amp;quot;data/titanic.csv&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es existieren in R Erweiterung die Schnittstellen und Importmöglichkeiten für andere Datenformate bieten:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SPSS &lt;code&gt;haven::read_sav(file = &amp;quot;data/titanic.sav&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Excel &lt;code&gt;readxl::read_xlsx(file = &amp;quot;data/titanic.xlsx&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;task&#34;&gt;
&lt;p&gt;&lt;strong&gt;Aufgabe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Nutzen sie die beiden Funktionen um den Datensatz als data.frame zu importieren. Speichern Sie den jeweiligen Datensatz in einer Variable.&lt;/p&gt;
&lt;p&gt;Berechnen Sie den Mittelwert des Alters und vergleichen Sie die Ergebnisse.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# einlesen des SPSS Datensatzes mit dem haven Paket
titanic_sav &amp;lt;- haven::read_sav(file = &amp;quot;data/titanic.sav&amp;quot;)
head(titanic_sav) # ersten sechs Zeilen des Datensatzes&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 14
##   pclass survived name  sex     age sibsp parch ticket  fare cabin embarked
##    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   
## 1      1        1 Alle… fema… 29        0     0 24160  211.  B5    S       
## 2      1        1 Alli… male   0.92     1     2 113781 152.  C22 … S       
## 3      1        0 Alli… fema…  2        1     2 113781 152.  C22 … S       
## 4      1        0 Alli… male  30        1     2 113781 152.  C22 … S       
## 5      1        0 Alli… fema… 25        1     2 113781 152.  C22 … S       
## 6      1        1 Ande… male  48        0     0 19952   26.6 E12   S       
## # ... with 3 more variables: boat &amp;lt;chr&amp;gt;, body &amp;lt;dbl&amp;gt;, home.dest &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(titanic_sav) # Zusammenfassung des Datensatzes&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      pclass         survived         name               sex           
##  Min.   :1.000   Min.   :0.000   Length:1309        Length:1309       
##  1st Qu.:2.000   1st Qu.:0.000   Class :character   Class :character  
##  Median :3.000   Median :0.000   Mode  :character   Mode  :character  
##  Mean   :2.295   Mean   :0.382                                        
##  3rd Qu.:3.000   3rd Qu.:1.000                                        
##  Max.   :3.000   Max.   :1.000                                        
##                                                                       
##       age            sibsp            parch          ticket         
##  Min.   : 0.17   Min.   :0.0000   Min.   :0.000   Length:1309       
##  1st Qu.:21.00   1st Qu.:0.0000   1st Qu.:0.000   Class :character  
##  Median :28.00   Median :0.0000   Median :0.000   Mode  :character  
##  Mean   :29.88   Mean   :0.4989   Mean   :0.385                     
##  3rd Qu.:39.00   3rd Qu.:1.0000   3rd Qu.:0.000                     
##  Max.   :80.00   Max.   :8.0000   Max.   :9.000                     
##  NA&amp;#39;s   :263                                                        
##       fare            cabin             embarked        
##  Min.   :  0.000   Length:1309        Length:1309       
##  1st Qu.:  7.896   Class :character   Class :character  
##  Median : 14.454   Mode  :character   Mode  :character  
##  Mean   : 33.295                                        
##  3rd Qu.: 31.275                                        
##  Max.   :512.329                                        
##  NA&amp;#39;s   :1                                              
##      boat                body        home.dest        
##  Length:1309        Min.   :  1.0   Length:1309       
##  Class :character   1st Qu.: 72.0   Class :character  
##  Mode  :character   Median :155.0   Mode  :character  
##                     Mean   :160.8                     
##                     3rd Qu.:256.0                     
##                     Max.   :328.0                     
##                     NA&amp;#39;s   :1188&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# einlesen des Excel Datensatzes
titanic_xlsx &amp;lt;- readxl::read_xlsx(&amp;quot;data/titanic.xlsx&amp;quot;)

# Berechnen der Mittelwerte des Alters in der Spalte `age`  
mean(titanic$age, na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 29.88114&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(titanic_sav$age, na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 29.88114&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean(titanic_xlsx$age, na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 29.88114&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;arbeiten-mit-dem-tidyverse&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Arbeiten mit dem tidyverse&lt;/h2&gt;
&lt;p&gt;Das tidyverse bedient sich einer einfachen Syntax und 5 zentralen Funktionen. Das besondere der Syntax ist das aneinanderreihen von (tidyverse) Funktionen. Der Pipe-Operator verbindet Funktionen und gibt den Funktionsoutput der vorangegangenen Funktion in die folgende Funktion als Funktionsinput weiter. Der Pipe Operator wird mit der Syntax &lt;code&gt;%&amp;gt;%&lt;/code&gt; (Prozentzeichen, größer-Zeichen, Prozentzeichen) verwendet. Fast alle Funktionen im tidyverse erwarten einen &lt;code&gt;data.frame&lt;/code&gt; als Funktionsinput und geben einen manipulierten &lt;code&gt;data.frame&lt;/code&gt; zurück.&lt;/p&gt;
&lt;p&gt;Die fünf zentralen Funktionen sind Verben, die ausdrücken, was die jeweilige Funktion “tut”.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/tut1-r-dplyr-functions.png&#34; alt=&#34;Auswahl wichtiger dplyr-Funktionen&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;Auswahl wichtiger dplyr-Funktionen&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;beispiele&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Beispiele&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Umrechnung der Fahrpreises&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;titanic %&amp;gt;% 
  mutate(fare = fare * 11.25) %&amp;gt;%
  arrange(fare) %&amp;gt;% tail&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 14
##   pclass survived name  sex     age sibsp parch ticket  fare cabin embarked
##    &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   
## 1      1        1 Fort… fema…  60       1     4 19950  2959. C23 … S       
## 2      1        1 Card… male   36       0     1 PC 17… 5764. B51 … C       
## 3      1        1 Card… fema…  58       0     1 PC 17… 5764. B51 … C       
## 4      1        1 Lesu… male   35       0     0 PC 17… 5764. B101  C       
## 5      1        1 Ward… fema…  35       0     0 PC 17… 5764. &amp;lt;NA&amp;gt;  C       
## 6      3        0 Stor… male   60.5     0     0 3701     NA  &amp;lt;NA&amp;gt;  S       
## # ... with 3 more variables: boat &amp;lt;int&amp;gt;, body &amp;lt;int&amp;gt;, home.dest &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Die ältesten 3 überlebenden Passagiere&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;titanic %&amp;gt;% 
  mutate(survived = if_else(survived == 1, TRUE, FALSE)) %&amp;gt;% 
  filter(survived) %&amp;gt;% 
  select(name, age, pclass) %&amp;gt;% 
  arrange(age) %&amp;gt;% 
  tail(n = 3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 3
##   name                                                age pclass
##   &amp;lt;chr&amp;gt;                                             &amp;lt;dbl&amp;gt;  &amp;lt;int&amp;gt;
## 1 Shine, Miss. Ellen Natalia                           NA      3
## 2 Smyth, Miss. Julia                                   NA      3
## 3 Thorneycroft, Mrs. Percival (Florence Kate White)    NA      3&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;task&#34;&gt;
&lt;p&gt;&lt;strong&gt;Aufgabe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Welche Passagiere haben den Höchsten Preis für die Reise bezahlt?&lt;/p&gt;
&lt;p&gt;Geben Sie den Namen und den Fahrpreis in der finale Tablle aus.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;titanic %&amp;gt;% 
  select(name, fare) %&amp;gt;% 
  arrange(desc(fare)) %&amp;gt;% 
  head(n = 10)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 2
##    name                                                             fare
##    &amp;lt;chr&amp;gt;                                                           &amp;lt;dbl&amp;gt;
##  1 Cardeza, Mr. Thomas Drake Martinez                               512.
##  2 Cardeza, Mrs. James Warburton Martinez (Charlotte Wardle Drake)  512.
##  3 Lesurer, Mr. Gustave J                                           512.
##  4 Ward, Miss. Anna                                                 512.
##  5 Fortune, Miss. Alice Elizabeth                                   263 
##  6 Fortune, Miss. Ethel Flora                                       263 
##  7 Fortune, Miss. Mabel Helen                                       263 
##  8 Fortune, Mr. Charles Alexander                                   263 
##  9 Fortune, Mr. Mark                                                263 
## 10 Fortune, Mrs. Mark (Mary McDougald)                              263&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://www.encyclopedia-titanica.org/titanic-survivor/thomas-cardeza.html&#34;&gt;Extrainfos&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Was ist das durchschnittliche Alter der Passagiere?&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Zusammenfassen durch den Mittelwert - &lt;code&gt;summarise&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;titanic %&amp;gt;% 
  summarise(age_mean = mean(age, na.rm = T))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 1
##   age_mean
##      &amp;lt;dbl&amp;gt;
## 1     29.9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Was ist das durchschnittliche Alter der männlichen und weiblichen Passagiere und was ist die Standardabeichung des Alters?&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gruppen erstellen entsprechend des Geschlechts - &lt;code&gt;group_by&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Zusammenfassen durch den Mittelwert - &lt;code&gt;summarise&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;titanic %&amp;gt;% 
  group_by(sex) %&amp;gt;% 
  summarise(age_mean = mean(age, na.rm = T), age_sd = sd(age, na.rm = T), n = n())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 4
##   sex    age_mean age_sd     n
##   &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt;
## 1 female     28.7   14.6   466
## 2 male       30.6   14.3   843&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;task&#34;&gt;
&lt;p&gt;&lt;strong&gt;Aufgabe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Was ist der durchschnittliche Fahrpreis und die jeweilige Streuung für die jeweiligen Klassen?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;titanic %&amp;gt;% 
  group_by(pclass) %&amp;gt;% 
  summarise(durchschnittl_fahrpreis = mean(fare, na.rm = TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   pclass durchschnittl_fahrpreis
##    &amp;lt;int&amp;gt;                   &amp;lt;dbl&amp;gt;
## 1      1                    87.5
## 2      2                    21.2
## 3      3                    13.3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;task&#34;&gt;
&lt;p&gt;&lt;strong&gt;Aufgabe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Der &lt;em&gt;New York Herold&lt;/em&gt; titelte am 15.April 1912: &lt;em&gt;The Titanic sinks with 1800 on board; only 675 mostly women and children, saved&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Finden sie heraus, ob diese Schlagzeile aus den Daten nachvollziehbar ist, indem Sie die Funktionen des &lt;code&gt;tidyverse&lt;/code&gt; anwenden.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;titanic %&amp;gt;%  
  group_by(survived, sex) %&amp;gt;%  
  summarise(n = n()) %&amp;gt;%  
  ungroup() %&amp;gt;%  
  mutate(prop = n / sum(n)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 4
##   survived sex        n   prop
##      &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;  &amp;lt;dbl&amp;gt;
## 1        0 female   127 0.0970
## 2        0 male     682 0.521 
## 3        1 female   339 0.259 
## 4        1 male     161 0.123&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;task&#34;&gt;
&lt;p&gt;&lt;strong&gt;Aufgabe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Es ist bekannt dass die Rettungsboote auf der Titanic nicht ausgelastet waren. Nun sollen Sie die tatsächliche Auslasung der Rettungsboote auf der Titanic berechnen.&lt;/p&gt;
&lt;p&gt;Die Informationen ob und in welches Rettungsboot ein Gast bestieg ist in der Spalte &lt;code&gt;boat&lt;/code&gt; des Titanic Datensatzes vermerkt.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# auslastung pro boot 
auslastung_pro_boot &amp;lt;- titanic %&amp;gt;%  
  filter(!is.na(boat)) %&amp;gt;%  
  group_by(boat) %&amp;gt;%  
  summarise(n = n()) %&amp;gt;%  
  mutate(auslastung = n / 65) 
   
# auslastung aller boote 
auslastung_aller_boote &amp;lt;- auslastung_pro_boot %&amp;gt;%  
  summarise(auslastung = mean(auslastung)) 
 
print(auslastung_pro_boot) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 16 x 3
##     boat     n auslastung
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;      &amp;lt;dbl&amp;gt;
##  1     1     5     0.0769
##  2     2    13     0.2   
##  3     3    26     0.4   
##  4     4    31     0.477 
##  5     5    30     0.462 
##  6     6    20     0.308 
##  7     7    23     0.354 
##  8     8    24     0.369 
##  9     9    25     0.385 
## 10    10    29     0.446 
## 11    11    25     0.385 
## 12    12    19     0.292 
## 13    13    42     0.646 
## 14    14    33     0.508 
## 15    15    38     0.585 
## 16    16    23     0.354&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(auslastung_aller_boote) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 1
##   auslastung
##        &amp;lt;dbl&amp;gt;
## 1      0.390&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;kapitel-5---grafiken&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Kapitel 5 - Grafiken&lt;/h1&gt;
&lt;p&gt;In R gibt es drei wichtige Softwarepakete um Grafiken zu erstellen.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lattice&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggplot2&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An dieser Stelle wird ein kurzer Ausblick auf das Basispaket in gegeben und zwei weesentliche Funktionen vorgestellt.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;XY-Plots&lt;/li&gt;
&lt;li&gt;Histogramme&lt;/li&gt;
&lt;li&gt;Boxplots&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;xy-plots&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;XY-Plots&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow = c(1,2)) 
# Bivariate Darstellung des Alters und des Preises 
plot(titanic$age, titanic$fare) 
plot(titanic$age, titanic$fare, col = titanic$pclass) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/sciphy-stats.netlify.compost/2018-09-06-r-tutorium-gmds-2018_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow = c(1, 1)) &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;histogramme&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Histogramme&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(titanic$age) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/sciphy-stats.netlify.compost/2018-09-06-r-tutorium-gmds-2018_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;boxplots&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Boxplots&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;boxplot(titanic$age) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/sciphy-stats.netlify.compost/2018-09-06-r-tutorium-gmds-2018_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;ruckblick-und-ausblick&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Rückblick und Ausblick&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Vom elementaren Datentyp über Vektoren zu Listen und data.frames&lt;/li&gt;
&lt;li&gt;&lt;code&gt;data.frames&lt;/code&gt; stellen das zentrale Datenelement im tidyverse dar&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Das &lt;code&gt;tidyverse&lt;/code&gt; ist der Werkzeigkasten in R zur Datenmanipulation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Weiter wichtige Funktionen z.B. aus der Inferenzstatistik sind in R vorhanden z.B. &lt;code&gt;?t.test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ein großer Funktionsumfrang zum Modellieren von Daten z.B. von Lineare Regression bis zur Neuronalen Netzen&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Weitere statistische Operationen wie z.B. Konfidenzintervalle und Inferenzstatistik (t.tests)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;titanic %&amp;gt;% 
  group_by(sex) %&amp;gt;% 
  filter(age &amp;gt;= 18) %&amp;gt;% 
  summarise(ci = list(Hmisc::smean.cl.boot(age))) %&amp;gt;% 
  mutate_at(&amp;quot;ci&amp;quot;, ~ map(.x, enframe)) %&amp;gt;% 
  unnest(ci) %&amp;gt;% 
  spread(key = name, value = value)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 4
##   sex    Lower  Mean Upper
##   &amp;lt;chr&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
## 1 female  31.9  33.2  34.4
## 2 male    32.6  33.6  34.7&lt;/code&gt;&lt;/pre&gt;
&lt;img src=&#34;/img/tut1-example-plot.png&#34; /&gt;
&lt;hr&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/tut1-r-decision-tree.png&#34; /&gt;

&lt;/div&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(rpart) # Paket mit dem Entscheidungsbäume erstellt werden können
library(rattle) # Paket mit dem Entscheidungsbäume visualisiert werden können

titanic %&amp;gt;% 
  ggplot(aes(x = factor(pclass), y = fare)) + 
  stat_summary(fun.data = mean_cl_boot, geom = &amp;quot;errorbar&amp;quot;, width = .15, size = 1.25) + 
  stat_summary(fun.y = mean, geom = &amp;quot;point&amp;quot;, size = 2) +
  geom_point(alpha = .05) +
  ylab(&amp;quot;Fahrpreis in Dollar (1912)&amp;quot;) +
  scale_x_discrete(labels = c(&amp;quot;1. Klasse&amp;quot;, &amp;quot;2. Klasse&amp;quot;, &amp;quot;3. Klasse&amp;quot;)) +
  scale_y_continuous(label = scales::dollar_format(), breaks = seq(0, 120, by = 20), limits = c(0, 120)) +
  theme_bw() +
  theme(axis.title.x = element_blank(), 
        axis.text = element_text(size = 12))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 68 rows containing non-finite values (stat_summary).

## Warning: Removed 68 rows containing non-finite values (stat_summary).&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: Removed 68 rows containing missing values (geom_point).&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/sciphy-stats.netlify.compost/2018-09-06-r-tutorium-gmds-2018_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;train &amp;lt;- titanic %&amp;gt;% select(survived, sex, age, pclass)
decision_tree &amp;lt;- rpart(survived ~ .,
                 data = train,
                 method =&amp;quot;class&amp;quot;)

fancyRpartPlot(decision_tree, main = &amp;quot;&amp;quot;, sub = &amp;quot;Welche Personen haben den Titanic-Untergang überlebt?&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/sciphy-stats.netlify.compost/2018-09-06-r-tutorium-gmds-2018_files/figure-html/unnamed-chunk-23-2.png&#34; width=&#34;672&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
      
    </item>
    
    <item>
      <title>Join by rows</title>
      <link>/post/join-by-rows/</link>
      <pubDate>Fri, 03 Aug 2018 00:00:00 +0000</pubDate>
      <author>Jens Hüsers</author>
      <guid>/post/join-by-rows/</guid>
      <description></description>
      
      <content>&lt;p&gt;In a recent project I find myself often in the situation to deal with similar but not equal datasets. I am working with the German Hospital Registers for the years since 2005 and there is a dataset for each year.&lt;/p&gt;
&lt;p&gt;Some of them share the same information stored in columns and I had to combine them in a single dataframe.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)  &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Attaching packages ────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ✔ ggplot2 3.0.0     ✔ purrr   0.2.5
## ✔ tibble  1.4.2     ✔ dplyr   0.7.6
## ✔ tidyr   0.8.1     ✔ stringr 1.3.1
## ✔ readr   1.1.1     ✔ forcats 0.3.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## ── Conflicts ───────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
## ✖ dplyr::filter() masks stats::filter()
## ✖ dplyr::lag()    masks stats::lag()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create two dataframes
widths &amp;lt;- iris %&amp;gt;% 
  select(Species, ends_with(&amp;quot;Width&amp;quot;))

lengths &amp;lt;- iris %&amp;gt;% 
  select(Species, ends_with(&amp;quot;Length&amp;quot;))


# dplyr::union(widths, lengths) # fails since not all columns are in both data.frames
# dplyr::intersect(widths, lengths) # fails since not all columns are in both data.frame
# dplyr::setdiff(widths, lengths) # fails since not all columns are in both data.frame
# dplyr::setequal(widths, lengths) # fails since not all columns are in both data.frame
dplyr::union_all(widths, lengths) %&amp;gt;% head # works, combines data.frames and fills with NA if column is not in one of the data.frames&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Species Sepal.Width Petal.Width Sepal.Length Petal.Length
## 1  setosa         3.5         0.2           NA           NA
## 2  setosa         3.0         0.2           NA           NA
## 3  setosa         3.2         0.2           NA           NA
## 4  setosa         3.1         0.2           NA           NA
## 5  setosa         3.6         0.2           NA           NA
## 6  setosa         3.9         0.4           NA           NA&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since this set operations work in most of the cases, it will not in the case that I want to combine dataframes and only keep columns which are present in each dataframe.&lt;/p&gt;
&lt;p&gt;Therefore, I wrote the following function to handle this special case, which occures multiple times in my current project.&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;join_rows&lt;/code&gt; takes two or more data.frames and combines them in the fashion described above. Although the name might be misleading, since it is not a join by itself, for me it is a good description the task it does.&lt;/p&gt;
&lt;p&gt;The function takes multiple data.frames and returns a data.frame containing all columns which all data.frame share. The function furthermore adds an ID column to keep the source dataset.&lt;/p&gt;
&lt;p&gt;Notice that it does not reduce any duplicated rows, but keeps them.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;join_rows &amp;lt;- function(...) {
  dots &amp;lt;- rlang::exprs(...)
  data_frame_names &amp;lt;- paste(purrr::map(dots, rlang::expr_name))
  data_frames &amp;lt;- list(...)
  cols &amp;lt;- purrr::map(data_frames, names)
  cols &amp;lt;- purrr::reduce(cols, intersect)
  data_frames &amp;lt;- map(data_frames, select, cols)
  data_frames &amp;lt;- data_frames %&amp;gt;% set_names(data_frame_names)
  bind_rows(data_frames, .id = &amp;quot;id&amp;quot;)
}

# gives us one column (species) since that is the only column(-name) that is shared across both dataframes
join_rows(lengths, widths) %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        id Species
## 1 lengths  setosa
## 2 lengths  setosa
## 3 lengths  setosa
## 4 lengths  setosa
## 5 lengths  setosa
## 6 lengths  setosa&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# will fail since 1 is not a data.frame
# join_rows(lengths, 1)&lt;/code&gt;&lt;/pre&gt;
</content>
      
    </item>
    
    <item>
      <title>Import ordered SPSS factors into R</title>
      <link>/post/import-ordered-spss-factors-into-r/</link>
      <pubDate>Wed, 18 Jul 2018 00:00:00 +0000</pubDate>
      <author>Jens Hüsers</author>
      <guid>/post/import-ordered-spss-factors-into-r/</guid>
      <description></description>
      
      <content>&lt;div id=&#34;spss-factor-variables&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;SPSS Factor Variables&lt;/h2&gt;
&lt;p&gt;Recently I have to work with data stored in SPSS files, most variables stored as ordered factor variables. Since I work with R, I have to import them. On the one hand, fortunatly, there is the &lt;code&gt;haven&lt;/code&gt; package, which makes importing SPSS files an easy taks. On the other hand, unfortunatly, ordered factors are imported as integer values which are not associated with the corresponding factor label. In consequence, it is very hard to tell what a integer value of a factor variable means. For example, when gender is stored as ordered factor variable, both genders are encoded as 1 for male and 2 for female. Since the mapping between the semantic of an encoded value is not explicit, SPSS associates those codes with there description expresst as string. R people know this as factor varible where numeric numbers are mapped to the factor labels.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;haven&lt;/code&gt; package is able to read the associated labels with a numeric value of a factor variable, we can map both. Since I didn’t find an option to do this mapping and convertion with the functions in the &lt;code&gt;haven&lt;/code&gt; package, I wrote a function to complete the desired task.&lt;/p&gt;
&lt;p&gt;I created the following work around to directly import ordered SPSS factors as factors in R with its associated factor order and factor label.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# load magrittr to enable pipe operator
library(magrittr)

relabel_spss_variable &amp;lt;- function(x) {
  a &amp;lt;- base::attr(x = x, &amp;quot;labels&amp;quot;) 
  if(!is.null(a)) {
    labels = base::names(a)
    levels = base::as.character(a)
    base::factor(x = x, levels = levels, labels = labels, ordered = TRUE) 
  } else {
    warning(&amp;quot;x is not label. No relabelling done.&amp;quot;)
    x
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# read spss file
# dataset from http://spss.allenandunwin.com.s3-website-ap-southeast-2.amazonaws.com/data-files.html
spss_file_url &amp;lt;- &amp;quot;http://spss.allenandunwin.com.s3-website-ap-southeast-2.amazonaws.com/Files/sleep.zip&amp;quot;
temp &amp;lt;- base::tempfile()
utils::download.file(spss_file_url, temp)
file &amp;lt;- base::unz(temp, &amp;quot;sleep.sav&amp;quot;)
spss &amp;lt;- haven::read_sav(file)
base::unlink(temp)

# subset spss dataset for presentation purpose
spss &amp;lt;- spss %&amp;gt;% dplyr::select(id:edlevel)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use the &lt;code&gt;$&lt;/code&gt; sign notation to convert one specific variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# convert variable
spss$edlevel_converted &amp;lt;- spss$edlevel %&amp;gt;% relabel_spss_variable
# numeric vector without factor labels
base::table(spss$edlevel)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##   1   2   3   4   5 
##   3  33  30  71 132&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# factor variable with (ordered) labels
base::table(spss$edlevel_converted)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##                          primary school 
##                                       3 
##                        secondary school 
##                                      33 
## trade training/ post secondary training 
##                                      30 
##                    undergraduate degree 
##                                      71 
##                     postgraduate degree 
##                                     132&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use functional programming to relabel every labeled variable in the dataframe.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;purrr::map_df(spss, relabel_spss_variable) %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in .f(.x[[i]], ...): x is not label. No relabelling done.

## Warning in .f(.x[[i]], ...): x is not label. No relabelling done.

## Warning in .f(.x[[i]], ...): x is not label. No relabelling done.&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 6
##      id sex      age marital        edlevel            edlevel_converted  
##   &amp;lt;dbl&amp;gt; &amp;lt;ord&amp;gt;  &amp;lt;dbl&amp;gt; &amp;lt;ord&amp;gt;          &amp;lt;ord&amp;gt;              &amp;lt;ord&amp;gt;              
## 1    83 female    42 married/defac… secondary school   secondary school   
## 2   294 female    54 married/defac… postgraduate degr… postgraduate degree
## 3   425 male      NA married/defac… secondary school   secondary school   
## 4    64 female    41 married/defac… postgraduate degr… postgraduate degree
## 5   536 female    39 married/defac… postgraduate degr… postgraduate degree
## 6    57 female    66 married/defac… undergraduate deg… undergraduate degr…&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</content>
      
    </item>
    
  </channel>
</rss>