---
author: "Jens HÃ¼sers"
date: "26 7 2018"
output:
  github_document:
editor_options: 
  chunk_output_type: console
categories: [dplyr, rstats]
---

```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)

```

In a recent project I find myself often in the situation to deal with similar but not equal datasets.
I am working with the German Hospital Registers for the years since 2005 and there is a dataset for each year.

Some of them share the same information stored in columns and I had to combine them in a single dataframe. 

```{r}

library(tidyverse)  

# create two dataframes
widths <- iris %>% 
  select(Species, ends_with("Width"))

lengths <- iris %>% 
  select(Species, ends_with("Length"))


# dplyr::union(widths, lengths) # fails since not all columns are in both data.frames
# dplyr::intersect(widths, lengths) # fails since not all columns are in both data.frame
# dplyr::setdiff(widths, lengths) # fails since not all columns are in both data.frame
# dplyr::setequal(widths, lengths) # fails since not all columns are in both data.frame
dplyr::union_all(widths, lengths) %>% head # works, combines data.frames and fills with NA if column is not in one of the data.frames

```

Since this set operations work in most of the cases, it will not in the case that I want to combine dataframes and only keep columns which are present in each dataframe.

Therefore, I wrote the following function to handle this special case, which occures multiple times in my current project.

The function `join_rows` takes two or more data.frames and combines them in the fashion described above. 
Although the name might be misleading, since it is not a join by itself, for me it is a good description the task it does.

The function takes multiple data.frames and returns a data.frame containing all columns which all data.frame share. 
The function furthermore adds an ID column to keep the source dataset.

Notice that it does not reduce any duplicated rows, but keeps them.

```{r}

join_rows <- function(...) {
  dots <- rlang::exprs(...)
  data_frame_names <- paste(purrr::map(dots, rlang::expr_name))
  data_frames <- list(...)
  cols <- purrr::map(data_frames, names)
  cols <- purrr::reduce(cols, intersect)
  data_frames <- map(data_frames, select, cols)
  data_frames <- data_frames %>% set_names(data_frame_names)
  bind_rows(data_frames, .id = "id")
}

# gives us one column (species) since that is the only column(-name) that is shared across both dataframes
join_rows(lengths, widths) %>% head

# will fail since 1 is not a data.frame
# join_rows(lengths, 1)

```
